@startuml
spring->spring:开启事务（TransactionInterceptor）
spring->spring:JtaTransactionManager-getTransaction()
spring->TM:UserTransaction-begin()(用户接口)
TM->TM:TransactionManager-begin()(充当用户接口和TM实现接口之间的桥梁)
TM->TM:TransactionManager-begin()(充当用户接口和TM实现接口之间的桥梁)
TM->TM:TransactionManagerImpl-begin()(TM实现接口)
TM->TM:TransactionManagerImpl--createCompositeTransaction(创建TM事务，放入Threadlocal）（包含参与者列表，后续不同数据库需加入参与者统一提交回滚)
spring->spring:执行增删改查(update)
spring->batis:MybatisMapperProxy-invoke()SqlSessionTemplate
batis->batis:SqlSessionTemplate-SqlSessionProxy-update()
batis->batis:SqlSessionInterceptor-invoke()
batis->batis:DefaultSqlSession-update()(自动提交本地事务等处理)
batis->batis:MybatisCachingExecutor-MybatisSimpleExecutor-update()
batis->batis:MybatisSimpleExecutor-prepareStatement()
batis->batis:PreparedStatementExecutor-execute()
batis->TM:SpringManagedTransaction-getConnect()
TM->TM:AtomikosXADataSourceBean-getConnect()
TM->TM:AtomikosXADataSourceBean-connectionPool-getConnectProxy()(返回AtomikosConnectionProxy)
batis->batis:AtomikosConnectionProxy-preparedStatement()
TM->TM:AtomikosConnectionProxy->invoke()
TM->TM:XAResource->start0()(开启XA，本地状态变更ACTIVE)
TM->TM:AtomikosConnectionProxy->enlist()(注册connnect到CompositeTransaction)
batis->batis:PreparedStatementExecutor-preparedStatement()
batis->batis:preparedStatement-excute()（执行sql）
spring->TM:TransactionInterceptor-rolback()
@enduml
